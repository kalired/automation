{%- set neighbors = [] -%}
{%- set neighbor = {} -%}
{%- for line in cdp_output.stdout_lines -%}
  {%- if line.startswith('Device ID:') -%}
    {%- set _ = neighbor.update({'device_id': line.split('Device ID: ')[1].strip()}) -%}
  {%- elif line.startswith('IP address:') -%}
    {%- set _ = neighbor.update({'ip_address': line.split('IP address: ')[1].strip()}) -%}
  {%- elif line.startswith('Platform:') -%}
    {%- set _ = neighbor.update({'platform': line.split('Platform: ')[1].strip()}) -%}
  {%- elif line.startswith('Interface:') -%}
    {%- set _ = neighbor.update({'interface': line.split('Interface: ')[1].strip()}) -%}
  {%- elif line.startswith('Port ID (outgoing port):') -%}
    {%- set _ = neighbor.update({'port_id': line.split('Port ID (outgoing port): ')[1].strip()}) -%}
    {%- set _ = neighbors.append(neighbor) -%}
    {%- set neighbor = {} -%}
  {%- endif -%}
{%- endfor -%}
{{ neighbors }}


To use this Jinja2 template, you can either store it in a separate file with a .j2 extension or include it inline within your Ansible playbook.

Here's an example of how you can use the template within an Ansible playbook:

---
- name: Search CDP Neighbors
  hosts: switches
  gather_facts: no

  tasks:
    - name: Show CDP neighbors
      ios_command:
        commands: show cdp neighbors detail
      register: cdp_output

    - name: Parse CDP output
      set_fact:
        cdp_neighbors: "{{ cdp_output.stdout[0] | jinja2_template('cdp_parser.j2') | from_yaml }}"

    - name: Display CDP neighbors
      debug:
        var: cdp_neighbors


In this example, the cdp_output.stdout[0] is passed through the jinja2_template filter, which applies the Jinja2 template to parse the CDP output. The resulting structured data is then transformed from YAML format back into a Python data structure using the from_yaml filter.

Make sure the template file (cdp_parser.j2) is located in the same directory as your playbook or specify the correct path to the template file.

Adjust the playbook and template as per your specific network setup and requirements.
