{% set arp_entries = [] %}
{% for line in arp_output.stdout_lines %}
  {% if line | regex_match('^Internet[^,]*,[^,]*,[^,]*,[^,]*,([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),[^,]*,([^,]*),[^,]*,([^,]*),.*$') %}
    {% set _ = arp_entries.append({'ip_address': line | regex_replace('^Internet[^,]*,[^,]*,[^,]*,[^,]*,([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),[^,]*,([^,]*),[^,]*,([^,]*),.*$', '\\1'),
                                   'mac_address': line | regex_replace('^Internet[^,]*,[^,]*,[^,]*,[^,]*,([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),[^,]*,([^,]*),[^,]*,([^,]*),.*$', '\\2'),
                                   'interface': line | regex_replace('^Internet[^,]*,[^,]*,[^,]*,[^,]*,([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),[^,]*,([^,]*),[^,]*,([^,]*),.*$', '\\3')}) %}
  {% endif %}
{% endfor %}
{% for entry in arp_entries %}
IP Address: {{ entry.ip_address }}
MAC Address: {{ entry.mac_address }}
Interface: {{ entry.interface }}
{% endfor %}

To use this Jinja2 template and write the parsed output to a file, you can use the template module in Ansible.

Here's an example of how you can use the template within an Ansible playbook:

---
- name: Parse and write ARP entries
  hosts: switches
  gather_facts: no

  tasks:
    - name: Show IP ARP table
      ios_command:
        commands: show ip arp
      register: arp_output

    - name: Write ARP entries to file
      template:
        src: arp_parser.j2
        dest: arp_entries.txt


In this example, the show ip arp command output is stored in the arp_output variable using the ios_command module.

The template module is then used to apply the Jinja2 template (arp_parser.j2) to the arp_output and write the parsed output to the arp_entries.txt file.

Make sure the template file (arp_parser.j2) is located in the same directory as your playbook or specify the correct path to the template file.

Adjust the playbook and template as per your specific network setup and requirements.
